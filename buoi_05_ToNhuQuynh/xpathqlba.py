from lxml import etree

# ƒê·ªçc d·ªØ li·ªáu t·ª´ file XML
tree = etree.parse("quanlybanan.xml")
root = tree.getroot()

# Danh s√°ch truy v·∫•n XPath
queries = {
    "1": ("L·∫•y t·∫•t c·∫£ b√†n", "/QUANLY/BANS/BAN"),
    "2": ("L·∫•y t·∫•t c·∫£ nh√¢n vi√™n", "/QUANLY/NHANVIENS/NHANVIEN"),
    "3": ("L·∫•y t·∫•t c·∫£ t√™n m√≥n", "/QUANLY/MONS/MON/TENMON"),
    "4": (
        "L·∫•y t√™n nh√¢n vi√™n c√≥ m√£ NV02",
        "/QUANLY/NHANVIENS/NHANVIEN[MANV='NV02']/TENV",
    ),
    "5": (
        "L·∫•y t√™n v√† s·ªë ƒëi·ªán tho·∫°i c·ªßa nh√¢n vi√™n NV03",
        [
            "/QUANLY/NHANVIENS/NHANVIEN[MANV='NV03']/TENV",
            "/QUANLY/NHANVIENS/NHANVIEN[MANV='NV03']/SDT",
        ],
    ),
    "6": ("L·∫•y t√™n m√≥n c√≥ gi√° > 50,000", "/QUANLY/MONS/MON[GIA > 50000]/TENMON"),
    "7": ("L·∫•y s·ªë b√†n c·ªßa h√≥a ƒë∆°n HD03", "/QUANLY/HOADONS/HOADON[SOHD='HD03']/SOBAN"),
    "8": ("L·∫•y t√™n m√≥n c√≥ m√£ M02", "/QUANLY/MONS/MON[MAMON='M02']/TENMON"),
    "9": (
        "L·∫•y ng√†y l·∫≠p c·ªßa h√≥a ƒë∆°n HD03",
        "/QUANLY/HOADONS/HOADON[SOHD='HD03']/NGAYLAP",
    ),
    "10": (
        "L·∫•y t·∫•t c·∫£ m√£ m√≥n trong h√≥a ƒë∆°n HD01",
        "/QUANLY/HOADONS/HOADON[SOHD='HD01']/CTHDS/CTHD/MAMON",
    ),
    "11": (
        "L·∫•y t√™n m√≥n trong h√≥a ƒë∆°n HD01",
        "/QUANLY/MONS/MON[MAMON = /QUANLY/HOADONS/HOADON[SOHD='HD01']/CTHDS/CTHD/MAMON]/TENMON",
    ),
    "12": (
        "L·∫•y t√™n nh√¢n vi√™n l·∫≠p h√≥a ƒë∆°n HD02",
        "/QUANLY/NHANVIENS/NHANVIEN[MANV = /QUANLY/HOADONS/HOADON[SOHD='HD02']/MANV]/TENV",
    ),
    "13": ("ƒê·∫øm s·ªë b√†n", "count(/QUANLY/BANS/BAN)"),
    "14": ("ƒê·∫øm s·ªë h√≥a ƒë∆°n l·∫≠p b·ªüi NV01", "count(/QUANLY/HOADONS/HOADON[MANV='NV01'])"),
    "15": (
        "L·∫•y t√™n t·∫•t c·∫£ m√≥n c√≥ trong h√≥a ƒë∆°n c·ªßa b√†n s·ªë 2",
        "/QUANLY/MONS/MON[MAMON = /QUANLY/HOADONS/HOADON[SOBAN=2]/CTHDS/CTHD/MAMON]/TENMON",
    ),
    "16": (
        "L·∫•y t·∫•t c·∫£ nh√¢n vi√™n t·ª´ng l·∫≠p h√≥a ƒë∆°n cho b√†n s·ªë 3",
        "/QUANLY/NHANVIENS/NHANVIEN[MANV = /QUANLY/HOADONS/HOADON[SOBAN=3]/MANV]",
    ),
    "17": (
        "L·∫•y t·∫•t c·∫£ h√≥a ƒë∆°n m√† nh√¢n vi√™n n·ªØ l·∫≠p",
        "/QUANLY/HOADONS/HOADON[MANV = /QUANLY/NHANVIENS/NHANVIEN[GIOITINH='N·ªØ']/MANV]",
    ),
    "18": (
        "L·∫•y t·∫•t c·∫£ nh√¢n vi√™n t·ª´ng ph·ª•c v·ª• b√†n s·ªë 1",
        "/QUANLY/NHANVIENS/NHANVIEN[MANV = /QUANLY/HOADONS/HOADON[SOBAN=1]/MANV]",
    ),
    "19": (
        "L·∫•y t·∫•t c·∫£ m√≥n ƒë∆∞·ª£c g·ªçi nhi·ªÅu h∆°n 1 l·∫ßn trong c√°c h√≥a ƒë∆°n",
        "/QUANLY/MONS/MON[MAMON = /QUANLY/HOADONS/HOADON/CTHDS/CTHD[SOLUONG > 1]/MAMON]",
    ),
    "20": (
        "L·∫•y t√™n b√†n + ng√†y l·∫≠p h√≥a ƒë∆°n t∆∞∆°ng ·ª©ng SOHD='HD02'",
        "concat(/QUANLY/BANS/BAN[SOBAN = /QUANLY/HOADONS/HOADON[SOHD='HD02']/SOBAN]/TENBAN, ' - ', /QUANLY/HOADONS/HOADON[SOHD='HD02']/NGAYLAP)",
    ),
}

# Menu t∆∞∆°ng t√°c
while True:
    print("\nüìã MENU TRUY V·∫§N XPATH")
    for key, (desc, _) in queries.items():
        print(f"{key}. {desc}")
    print("0. Tho√°t")

    choice = input("\nüëâ Ch·ªçn truy v·∫•n (0 ƒë·ªÉ tho√°t): ")
    if choice == "0":
        print("T·∫°m bi·ªát Anh nh√©!")
        break

    if choice in queries:
        desc, query = queries[choice]
        print(f"\nüîç {desc}")
        if isinstance(query, list):
            for q in query:
                result = root.xpath(q)
                print(
                    f"K·∫øt qu·∫£ t·ª´ '{q}': {[r.text if hasattr(r, 'text') else r for r in result]}"
                )
        else:
            result = root.xpath(query)
            if isinstance(result, (float, int, str)):
                print("K·∫øt qu·∫£:", result)
            elif isinstance(result, list):
                for item in result:
                    if isinstance(item, etree._Element):
                        print(
                            etree.tostring(item, pretty_print=True, encoding="unicode")
                        )
                    else:
                        print("K·∫øt qu·∫£:", item)
            else:
                print("K·∫øt qu·∫£:", result)
        input("\nNh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
    else:
        print("‚ö†Ô∏è L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i.")
